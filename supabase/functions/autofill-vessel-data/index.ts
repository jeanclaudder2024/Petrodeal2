import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface AutofillRequest {
  vesselId: number;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { vesselId }: AutofillRequest = await req.json();

    if (!vesselId) {
      throw new Error('Vessel ID is required');
    }

    // Get user from auth header
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('Authorization header required');
    }

    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabaseClient.auth.getUser(token);
    
    if (authError || !user) {
      throw new Error('Invalid authentication');
    }

    console.log('Auto-filling vessel data for vessel ID:', vesselId, 'by user:', user.id);

    // Validate OpenAI API key
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Get the vessel data
    const { data: vessel, error: vesselError } = await supabaseClient
      .from('vessels')
      .select('*')
      .eq('id', vesselId)
      .single();

    if (vesselError || !vessel) {
      throw new Error('Vessel not found');
    }

    console.log('Current vessel data:', vessel.name);

    // Analyze missing data and create AI prompt
    const missingFields = analyzeMissingData(vessel);
    
    if (missingFields.length === 0) {
      return new Response(
        JSON.stringify({
          success: true,
          message: 'No missing data detected',
          updatedFields: []
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    const aiPrompt = createAutofillPrompt(vessel, missingFields);

    console.log('Calling OpenAI to autofill missing data for fields:', missingFields);

    // Call OpenAI to generate missing data
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are a maritime data expert. Your job is to intelligently fill missing vessel data based on existing information. Always provide realistic, industry-standard values. Return only valid JSON with the requested fields.'
          },
          {
            role: 'user',
            content: aiPrompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.3
      }),
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error (${openaiResponse.status}): ${errorText}`);
    }

    const aiResult = await openaiResponse.json();
    
    if (!aiResult.choices || !aiResult.choices[0] || !aiResult.choices[0].message) {
      console.error('Invalid OpenAI response structure:', aiResult);
      throw new Error('Invalid response structure from OpenAI');
    }
    
    const aiGeneratedData = aiResult.choices[0].message.content;

    console.log('AI generated data:', aiGeneratedData);

    // Parse the AI response
    let parsedData;
    try {
      parsedData = JSON.parse(aiGeneratedData);
    } catch (parseError) {
      console.error('Failed to parse AI response:', aiGeneratedData);
      throw new Error('Invalid JSON response from AI');
    }

    // Validate and sanitize the AI-generated data
    const sanitizedData = sanitizeAIData(parsedData, missingFields);

    if (Object.keys(sanitizedData).length === 0) {
      throw new Error('No valid data generated by AI');
    }

    console.log('Sanitized data to update:', sanitizedData);

    // Update the vessel with the new data
    const { data: updatedVessel, error: updateError } = await supabaseClient
      .from('vessels')
      .update({
        ...sanitizedData,
        updated_at: new Date().toISOString()
      })
      .eq('id', vesselId)
      .select()
      .single();

    if (updateError) {
      console.error('Error updating vessel:', updateError);
      throw new Error('Failed to update vessel data');
    }

    console.log('Successfully updated vessel:', updatedVessel.name);

    return new Response(
      JSON.stringify({
        success: true,
        message: `Successfully auto-filled ${Object.keys(sanitizedData).length} missing fields`,
        updatedFields: Object.keys(sanitizedData),
        updatedVessel: updatedVessel
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('Error in autofill-vessel-data function:', error);
    
    const errorResponse = {
      error: error instanceof Error ? error.message : 'Unknown error occurred',
      details: {
        timestamp: new Date().toISOString(),
        function: 'autofill-vessel-data'
      }
    };
    
    return new Response(
      JSON.stringify(errorResponse),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});

function analyzeMissingData(vessel: any): string[] {
  const requiredFields = [
    'vessel_type', 'flag', 'mmsi', 'imo', 'callsign', 'built',
    'length', 'width', 'beam', 'draught', 'deadweight', 'gross_tonnage',
    'cargo_capacity', 'engine_power', 'crew_size', 'fuel_consumption',
    'cargo_type', 'oil_type', 'owner_name', 'operator_name'
  ];

  const missingFields: string[] = [];

  for (const field of requiredFields) {
    if (!vessel[field] || vessel[field] === null || vessel[field] === '') {
      missingFields.push(field);
    }
  }

  return missingFields;
}

function createAutofillPrompt(vessel: any, missingFields: string[]): string {
  const existingData = {
    name: vessel.name,
    vessel_type: vessel.vessel_type,
    flag: vessel.flag,
    built: vessel.built,
    deadweight: vessel.deadweight,
    length: vessel.length,
    cargo_type: vessel.cargo_type,
    current_region: vessel.current_region
  };

  // Filter out null/undefined values
  const validExistingData = Object.fromEntries(
    Object.entries(existingData).filter(([_, value]) => value != null && value !== '')
  );

  return `
Based on the following existing vessel data, please generate realistic values for the missing fields:

EXISTING VESSEL DATA:
${JSON.stringify(validExistingData, null, 2)}

MISSING FIELDS TO FILL:
${missingFields.join(', ')}

Please generate realistic, industry-standard values for these missing fields. Consider:
- Vessel type compatibility (tanker, cargo, etc.)
- Regional standards for the vessel's flag state
- Typical specifications for vessels of similar size/type
- Maritime industry conventions

Return ONLY a valid JSON object with the missing fields and their values. Use these guidelines:
- vessel_type: Use standard IMO vessel types (Oil Tanker, Bulk Carrier, Container Ship, etc.)
- flag: Use actual country names (Marshall Islands, Liberia, Panama, etc.)
- mmsi: 9-digit number starting with country code
- imo: 7-digit IMO number
- callsign: 4-8 character alphanumeric code
- built: Year between 1980-2024
- length: Meters (50-400 typical range)
- width/beam: Meters (8-60 typical range)
- draught: Meters (3-25 typical range)
- deadweight: Tons (1000-500000 typical range)
- gross_tonnage: Tons (500-250000 typical range)
- cargo_capacity: Barrels for oil tankers (10000-3000000 typical)
- engine_power: kW (1000-80000 typical range)
- crew_size: Number of people (15-30 typical)
- fuel_consumption: MT/day (20-300 typical)
- cargo_type: Crude Oil, Refined Products, etc.
- oil_type: WTI, Brent, Heavy Crude, etc.
- owner_name: Realistic shipping company name
- operator_name: Realistic shipping company name

Example format:
{
  "vessel_type": "Oil Tanker",
  "flag": "Marshall Islands",
  "mmsi": "538123456",
  "deadweight": 115000
}
`;
}

function sanitizeAIData(aiData: any, allowedFields: string[]): any {
  const sanitized: any = {};

  for (const field of allowedFields) {
    if (aiData[field] !== undefined && aiData[field] !== null) {
      const value = aiData[field];
      
      // Basic validation based on field type
      switch (field) {
        case 'built':
          if (typeof value === 'number' && value >= 1980 && value <= 2024) {
            sanitized[field] = value;
          }
          break;
        case 'mmsi':
          if (typeof value === 'string' && /^\d{9}$/.test(value)) {
            sanitized[field] = value;
          }
          break;
        case 'imo':
          if (typeof value === 'string' && /^\d{7}$/.test(value)) {
            sanitized[field] = value;
          }
          break;
        case 'length':
        case 'width':
        case 'beam':
        case 'draught':
        case 'deadweight':
        case 'gross_tonnage':
        case 'cargo_capacity':
        case 'engine_power':
        case 'crew_size':
        case 'fuel_consumption':
          if (typeof value === 'number' && value > 0) {
            sanitized[field] = value;
          }
          break;
        default:
          if (typeof value === 'string' && value.trim().length > 0) {
            sanitized[field] = value.trim();
          }
      }
    }
  }

  return sanitized;
}