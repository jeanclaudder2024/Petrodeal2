import { basename, extname } from 'path';
import { createReadStream, ReadStream } from 'fs';
import { Readable } from 'stream';
import { isBuffer, isFileName, isFileUri, isIterable, isObject, isStream, isString, isTuple, isURL, } from './source-checkers';
export const DEFAULT_FILENAME = 'index.html';
export const toTuples = (source, recursive = false) => {
    if (isURL(source))
        return [];
    if (isFileUri(source)) {
        return !recursive && extname(source) === '.html'
            ? [[DEFAULT_FILENAME, source]]
            : [[basename(source), source]];
    }
    if (isString(source) || isBuffer(source)) {
        return [[DEFAULT_FILENAME, source]];
    }
    if (isStream(source)) {
        if (source instanceof ReadStream) {
            const name = basename(String(source.path));
            return !recursive && extname(name) === '.html'
                ? [[DEFAULT_FILENAME, source]]
                : [[name, source]];
        }
        else {
            return [[DEFAULT_FILENAME, source]];
        }
    }
    if (isTuple(source)) {
        if (isFileName(source[0])) {
            return [source];
        }
        throw new Error(`Source name "${source[0]}" doesn't look like file name`);
    }
    if (isObject(source)) {
        const ret = [];
        for (const key in source) {
            if (source.hasOwnProperty(key)) {
                if (isFileName(key)) {
                    ret.push([key, source[key]]);
                }
                else {
                    throw new Error(`Source name "${key}" doesn't look like file name`);
                }
            }
        }
        return ret;
    }
    if (isIterable(source)) {
        const ret = [];
        for (const src of source) {
            ret.push(...toTuples(src, true));
        }
        return ret;
    }
    throw new Error(`Bad source, don't know what to do with "${source}"`);
};
export const fromFile = (path) => createReadStream(path.replace(/^file:(\/\/)?/, ''));
export const toStream = (source) => isStream(source)
    ? source
    : isFileUri(source)
        ? fromFile(source)
        :
            new Readable({
                read() {
                    this.push(source);
                    this.push(null);
                },
            });
export const toStreams = (source) => {
    if (!source)
        return [];
    const tuples = toTuples(source);
    const ret = [];
    for (let i = 0; i < tuples.length; i++) {
        ret.push([tuples[i][0], toStream(tuples[i][1])]);
    }
    return ret;
};
