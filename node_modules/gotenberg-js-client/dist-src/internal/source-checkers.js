import { URL } from 'url';
import { Readable } from 'stream';
export const isString = (x) => typeof x === 'string';
export const isBuffer = (x) => x != null && x instanceof Buffer;
export const isStream = (x) => x != null && x instanceof Readable;
export const isURL = (x) => x != null && x instanceof URL;
export const isFileUri = (x) => isString(x) && x.startsWith('file:');
export const isPlain = (x) => isString(x) || isStream(x) || isBuffer(x);
export const isTuple = (x) => Array.isArray(x) && x.length === 2 && typeof x[0] === 'string' && isPlain(x[1]);
export const isObject = (x) => {
    if (x == null ||
        typeof x !== 'object' ||
        Array.isArray(x) ||
        typeof x[Symbol.iterator] === 'function' ||
        x instanceof URL) {
        return false;
    }
    for (const key in x) {
        if (x.hasOwnProperty(key) && !isPlain(x[key]))
            return false;
    }
    return true;
};
export const isIterable = (x) => {
    if (x == null || typeof x === 'string')
        return false;
    if (typeof x[Symbol.iterator] === 'function') {
        for (const src of x) {
            if (src == null)
                return false;
            if (!isPlain(src) && !isTuple(src) && !isObject(src))
                return false;
        }
        return true;
    }
    return false;
};
const filenameRE = /.+\..+/;
const filenameReservedRE = /[<>:"/\\|?*\u0000-\u001F]/g;
const windowsReservedNameRE = /^(con|prn|aux|nul|com\d|lpt\d)$/i;
const MAX_FILE_NAME_LENGTH = 255;
export const isFileName = (x) => isString(x) &&
    x.length <= MAX_FILE_NAME_LENGTH &&
    x !== '.' &&
    x !== '..' &&
    !x.startsWith('file:') &&
    !filenameReservedRE.test(x) &&
    !windowsReservedNameRE.test(x) &&
    filenameRE.test(x);
