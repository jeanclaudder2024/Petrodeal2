import FormData from 'form-data';
import { RequestType } from './_types';
import { DEFAULT_FILENAME, toStreams } from './internal/source-converters';
const formdata = (fields, files) => {
    const data = new FormData();
    for (const field in fields) {
        if (fields.hasOwnProperty(field)) {
            const value = fields[field];
            if (value !== undefined) {
                data.append(field, String(value));
            }
        }
    }
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        data.append(file[0], file[1], { filename: file[0] });
    }
    return data;
};
const validateSources = (type, sources) => {
    const filenames = sources.map((source) => source[0]);
    const duplicates = filenames.filter((name, index, arr) => arr.indexOf(name) !== index);
    if (duplicates.length > 0) {
        throw new Error(`There are duplicates in file names: ${duplicates.join(',')}`);
    }
    const hasDefault = filenames.includes(DEFAULT_FILENAME);
    if ((type === RequestType.Html || type === RequestType.Markdown) && !hasDefault) {
        throw new Error(`File "${DEFAULT_FILENAME}" is required for ${type === RequestType.Html ? 'HTML' : 'Markdown'} conversion`);
    }
    if (type === RequestType.Office && hasDefault) {
        throw new Error(`Default filename "${DEFAULT_FILENAME}" is not allowed for Office conversion, ` +
            `looks like you didn't set filename for document`);
    }
    return sources;
};
export const please = (request) => {
    if (request.type === RequestType.Ping) {
        if (typeof request.client.get === 'function') {
            return request.client.get(request.url).then((response) => {
                response.resume();
            });
        }
        throw new Error(`Gotenberg client doesn't implements "get" method`);
    }
    const sources = validateSources(request.type, toStreams(request.source));
    const form = formdata(request.fields, sources);
    return request.client.post(request.url, form, request.headers);
};
