import http from 'http';
import https from 'https';
import { URL } from 'url';
const parse = (url) => {
    const _url = new URL(url);
    const request = _url.protocol === 'http:' ? http.request : https.request;
    return [_url, request];
};
export function post(url, data, headers) {
    const [_url, request] = parse(url);
    return new Promise((resolve, reject) => {
        const req = request(_url, {
            method: 'POST',
            ...this,
            headers: {
                ...data.getHeaders(),
                ...headers,
                ...(this ? this.headers : null),
            },
        });
        req.on('error', reject);
        req.on('response', (res) => {
            if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {
                resolve(res);
            }
            else {
                let error = res.statusCode + ' ' + res.statusMessage;
                const chunks = [];
                res.on('data', (chunk) => chunks.push(chunk));
                res.on('end', () => {
                    try {
                        error += ' (' + JSON.parse(Buffer.concat(chunks).toString()).message + ')';
                    }
                    catch (err) {
                    }
                    reject(new Error(error));
                });
            }
        });
        data.pipe(req);
    });
}
export function get(url) {
    const [_url, request] = parse(url);
    return new Promise((resolve, reject) => {
        const req = request(_url, {
            method: 'GET',
            ...this,
        });
        req.on('error', reject);
        req.on('response', (res) => {
            if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {
                resolve(res);
            }
            else {
                res.resume();
                reject(new Error(res.statusCode + ' ' + res.statusMessage));
            }
        });
        req.end();
    });
}
export const client = (config) => ({
    post: post.bind(config || null),
    get: get.bind(config || null),
});
